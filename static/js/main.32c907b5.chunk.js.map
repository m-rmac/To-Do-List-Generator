{"version":3,"sources":["components/searchbar/searchbar.component.jsx","components/card/card.component.jsx","components/to-doCards/toDoCards.component.jsx","components/dropDown/dropDown.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","toDo","onDelete","onComplete","complete","content","defaultChecked","checkedStatus","onClick","id","ToDoCards","toDoList","map","DropDown","name","value","App","props","deleteTodo","updatedTodos","state","filter","todo","setState","completeToDo","updateStatus","searchField","completeStatus","addItem","bind","e","console","log","this","_inputElement","newinput","newItem","Date","now","prevState","concat","preventDefault","searchFilter","toLowerCase","includes","match","onSubmit","ref","a","target","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32c907b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './searchbar.style.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n\r\n<input\r\n    className='search'\r\n    type='search'\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    ></input>\r\n\r\n    \r\n\r\n)","import React from 'react';\r\n\r\nimport \"../../components/card/card.style.css\";\r\n\r\nexport const Card = ({toDo, onDelete, onComplete}) => (\r\n\r\n    <div className = {toDo.complete}>\r\n\r\n        <p>{toDo.content}</p>\r\n        <label className=\"container\">\r\n            <input  className=\"complete\" \r\n            type=\"checkbox\"\r\n            defaultChecked={toDo.checkedStatus}\r\n            onClick={() => onComplete(toDo.id)}></input>\r\n            <span className=\"checkmark\"></span>\r\n        </label>\r\n\r\n        <button className=\"delete\" onClick={() => onDelete(toDo.id)}><i className = \"fas fa-trash\"></i></button>\r\n\r\n    </div>\r\n\r\n)\r\n\r\n","import React from \"react\";\r\n\r\nimport \"../to-doCards/toDoCards.style.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const ToDoCards = ({toDoList, onDelete, onComplete}) => (\r\n\r\n\r\n    <div className = \"card-list\">\r\n\r\n        {toDoList.map(toDo => (\r\n\r\n          <Card key = {toDo.id} toDo = {toDo} onDelete={onDelete} onComplete={onComplete}></Card>\r\n\r\n\r\n        ))}\r\n       \r\n    </div>\r\n\r\n\r\n)","import React from \"react\";\r\n\r\nimport '../dropDown/dropDown.style.css';\r\n\r\n\r\nexport const DropDown = ({handleChange}) => (\r\n\r\n    \r\n    <select className=\"dropDown\" id=\"status\" name=\"status\" onChange = {handleChange}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"incomplete\">Incomplete</option>\r\n          <option value=\"completed\">Completed</option>\r\n    </select>\r\n\r\n)\r\n","import React, {Component} from 'react';\nimport './App.css';\n\n\nimport { SearchBox } from './components/searchbar/searchbar.component';\nimport { ToDoCards } from './components/to-doCards/toDoCards.component';\nimport{ DropDown } from './components/dropDown/dropDown.component';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      // To do list contents and searchbar field contents\n      toDoList: [\n        {\n          \"id\":1,\n          \"content\": \"Complete To-do list application\",\n          \"complete\": \"completed\",\n          \"checkedStatus\": true\n        },\n\n        {\n          \"id\":2,\n          \"content\": \"File taxes\",\n          \"complete\": \"incomplete\",\n          \"checkedStatus\": false\n        }\n      ],\n\n      searchField: '',\n\n      completeStatus: \"all\"\n    }\n    \n   \n    this.addItem = this.addItem.bind(this);\n\n  }\n\n// To Do List Functions (modifying the list)\n\n  // Delete an item\n\ndeleteTodo = (id) => {\n  const updatedTodos = this.state.toDoList.filter((todo) => {\n    return todo.id !== id;\n  });\n\n  this.setState({\n    toDoList: updatedTodos\n  });\n}\n\n\n// Adding a new item\naddItem(e){\n\n  console.log(this._inputElement.value);\n  console.log(e);\n  if(this._inputElement.newinput !==\"\"){\n    var newItem = {\n        content: this._inputElement.value,\n        id: Date.now(),\n        complete:\"incomplete\",\n        checkedStatus: false\n    };\n  \n\n  this.setState((prevState) => {\n    \n      return{\n        toDoList: prevState.toDoList.concat(newItem)\n      };\n      \n    \n  });\n\n  this._inputElement.value =\"\";\n}\n\ne.preventDefault();\n\n}\n\n// Changing item status (complete or not complete)\n\ncompleteToDo = (id) => {\n\n  const updateStatus = this.state.toDoList.map((toDo) => {\n    \n\n    if(id === toDo.id){\n\n      if(toDo.complete === \"incomplete\")\n\n      return{...toDo, complete:\"completed\", checkedStatus:true}\n\n      else if(toDo.complete === \"completed\")\n\n      return{...toDo, complete:\"incomplete\", checkedStatus:false}\n      \n    }\n    \n    return toDo;\n  });\n\n  this.setState({\n    toDoList: updateStatus\n    \n  });\n  \n}\n\n\n  render(){\n\n    // filter based on search field\n\n    const { toDoList, searchField, completeStatus} = this.state;\n\n    \n\n    var searchFilter = [];\n\n    searchFilter = toDoList.filter(toDo =>\n      toDo.content.toLowerCase().includes(searchField.toLowerCase())\n      \n      );\n\n\n      if (completeStatus === \"completed\"){\n        \n        searchFilter = searchFilter.filter(toDo =>\n          toDo.complete.match(\"completed\")\n          \n          );\n      }\n    \n      if (completeStatus === \"incomplete\"){\n        searchFilter = searchFilter.filter(toDo =>\n          toDo.complete.match(\"incomplete\")\n          \n          )\n      }\n    \n    \n      \n    \n  \n    return (\n      <div className=\"App\" >\n        \n        <h1 id=\"app-name\">To-Do List Generator</h1>\n        \n     \n    <form onSubmit={this.addItem}>\n        <input \n        className=\"newItem\"\n        ref={(a) => this._inputElement = a} \n        type = \"text\"\n        placeholder=\"add more items\">   \n        </input>\n\n        <button type=\"submit\"  className=\"submit\"><i className = \"fas fa-plus\"></i></button>\n    </form>\n    \n\n    <SearchBox\n        \n          placeholder={'Search to-do items'}\n          handleChange = {e => this.setState({searchField: e.target.value})}\n\n    ></SearchBox>\n\n    <DropDown\n      handleChange={e => this.setState({completeStatus: e.target.value})}\n    />\n      \n    <ToDoCards toDoList = {searchFilter} onDelete = {this.deleteTodo} onComplete={this.completeToDo}></ToDoCards>\n      \n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}